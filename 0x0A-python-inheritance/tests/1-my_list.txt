>>> MyList = __import__('1-my_list').MyList
>>> listob = MyList()
>>> print(listob)
[]
>>> type(listob)
<class '1-my_list.MyList'>

Give a list argument(s) to class and test
>>> listob = MyList([3, 4, 1, 2, 5])
>>> print(listob)
[3, 4, 1, 2, 5]
>>> listob = MyList(None)
Traceback (most recent call last):
	...
TypeError: 'NoneType' object is not iterable

>>> listob = MyList([3, 4, 1, 2, 5], [3, 7])
Traceback (most recent call last):
	...
TypeError: list expected at most 1 argument, got 2

Test built-in list functions
>>> listob.append(8)
>>> print(listob)
[3, 4, 1, 2, 5, 8]
>>> listob.remove(2)
>>> print(listob)
[3, 4, 1, 5, 8]

Test print_sorted method
>>> listob.print_sorted()
[1, 3, 4, 5, 8]

Method takes no argument
>>> listob.print_sorted(1)
Traceback (most recent call last):
	...
TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

# Strings are sorted lexicographically
>>> listob = MyList(['Orange', 'Bannana', 'Mango', 'Apple', 'Avocado'])
>>> listob.print_sorted()
['Apple', 'Avocado', 'Bannana', 'Mango', 'Orange']

List remains unaltered
>>> print(listob)
['Orange', 'Bannana', 'Mango', 'Apple', 'Avocado']

Method raises error when list contains different types
>>> listob = MyList([1, 'Orange', 'Bannana', 'Mango', 3, 'Apple', 'Avocado', 9])
>>> listob.print_sorted()
Traceback (most recent call last):
	...
TypeError: '<' not supported between instances of 'str' and 'int'

When used on an empty list, it returns it as is
>>> listob = MyList()
>>> listob.print_sorted()
[]
