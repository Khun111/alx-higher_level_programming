Matrix multiplication test
>>> module = __import__('100-matrix_mul')
>>> matrix_mul = module.matrix_mul
>>> len(module.__doc__) > 1
True
>>> len(matrix_mul.__doc__) > 1
True

# Test valid matrix multiplication
>>> m_a = [[1, 2, 3], [4, 5, 6]]
>>> m_b = [[7, 8], [9, 10], [11, 12]]
>>> matrix_mul(m_a, m_b)
[[58, 64], [139, 154]]

# Test invalid input: m_a not a list
>>> m_a = 'invalid'
>>> m_b = [[1, 2], [3, 4]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a must be a list

# Test invalid input: m_a not a list of lists
>>> m_a = [1, 2, 3]
>>> m_b = [[1, 2], [3, 4]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

# Test invalid input: m_a empty
>>> m_a = []
>>> m_b = [[1, 2], [3, 4]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a can't be empty

# Test invalid input: m_a contains non-integer elements
>>> m_a = [[1, 2], [3, 'a']]
>>> m_b = [[1, 2], [3, 4]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

# Test invalid input: m_a not a rectangle
>>> m_a = [[1, 2], [3, 4, 5]]
>>> m_b = [[1, 2], [3, 4]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

# Test invalid input: m_a and m_b cannot be multiplied
>>> m_b = [[1, 2], [3, 4]]
>>> m_a = [[1, 2, 3], [4, 5, 6]]
>>> matrix_mul(m_a, m_b)
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied
